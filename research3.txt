-----------------------
CREATING CUSTOM SCRIPTS
-----------------------
- Open your package.json file
- Locate the "scripts" section
- Add a new script for the development build
  name: start
  value: parcel index.html
- save the package.json file
- use: npm run start
- we can make additional configurations like specifying the port number like: parcel index.html --8080

---------------------
CREATING A PROD BUILD
---------------------
- remove the main configuration from the package.json file 
- and then run the custom script for creating a prod build
- but this prod build doesn't give a link (not understood why)

-------------------
REACT.CREATEELEMENT
-------------------
- this function returns a JavaScript function that represents a react element
- this object contains data about the react element like the $$typeof, type, props, key, props (which contains id, className, children)

--------------------------
BTS OF REACT.CREATEELEMENT
--------------------------
- the react.createElement creates a virtual DOM element (which is actually a JavaScript object)
- then reacts starts it's reconciliation (which involves rendering to make a new virtual dom, diffing to calculate minimum differences that needs to be done, commit phase to update the actual dom, creation of new virtual dom) 
- after react has successfully and efficiently updated the actual DOM, the browser renders it

--------------
RECONCILIATION
--------------
- the first step in this is rendering in which a new virtual dom is constructed
- then diffing is done
- now the commit phase of the reconciliation starts which involves updating the actual dom
- and in this commit phase new HTML elements are created if necessary, updating existing HTML elements, removing HTML elements  

-------
DIFFING
-------
- means doing the calculations about what's the minimum changes to be made on the older virtual DOM to get to the new Virtual dom 

-----------
VIRTUAL DOM
-----------
- React maintains a lightweight copy of the actual DOM, known as the virtual DOM. This virtual representation allows React to perform updates more efficiently.

-------
WHY JSX
-------
- JSX stands for JavaScript XML
- It is a syntax extension for JavaScript that looks similar to XML or HTML. 
- It is commonly used with React to write UI components more concisely and with a syntax that closely resembles the final output.
- JSX is more readable that React.createElement syntax
- JSX create UI components are more precise than React.createElement created UI components
- JSX facilitates easy embedding of JavaScript expressions than React.createElement 
- JSX is supported by most modern IDEs
- JSX code is transpiled into normal JavaScript using Babel
- but JSX is syntactic sugar, the JSX code is transformed into the corresponding React.createElement calls during the build process

-----
BABEL
-----
- It transpile modern JavaScript code, including JSX, into a version of JavaScript that is compatible with a wide range of browsers. 
- JSX, being a syntactic extension for JavaScript, is not natively understood by browsers, so it needs to be transformed into standard JavaScript before it can be executed.

----------
COMPONENTS
----------
- a component is a reusable, self-contained piece of code that defines a part of a user interface
- Components are the building blocks of a React application
- they encapsulate the logic and rendering behavior for a specific part of the UI.
- Functional components are simple JavaScript functions that take in props (short for properties) as arguments and return React elements that describe what should be rendered.
- They are also known as stateless components because they don't have their own internal state. They are primarily used for presenting UI based on the props they receive
- the initial Functional components couldn't hold or manage local state (they were state less)
- and the introduction to hooks addressed this limitation
- a Functional component typically returns some jsx, which is then converted into React.createElement like structure

--------------------------------
RENDERING A FUNCTIONAL COMPONENT
--------------------------------
- rendering a functional component is little different from rendering a react element or jsx
- for rendering functional components we need to use <ComponentName/>
- some ways of using functional component inside a functional component are as follows
  - <CompName></CompName>
  - {CompName()}

---------------------
JAVASCRIPT INSIDE JSX
---------------------
- we can write JavaScript expressions inside jsx 
- this is a powerful feature of jsx
- but we need to wrap our javascript code inside {} so that react is able to distinguish between regular text and javascript expressions

------------------------------------------
WHAT IF WE INCLUDE DYNAMIC DATA INSIDE JSX
------------------------------------------
- If we include dynamic data into our jsx, react will automatically escape special characters to prevent potential security vulnerabilities like cross side scripting attacks. 
- if we try to have some script inside our jsx, then react will automatically escape the content of scriptElement so that it is rendered as text not as executable javascript
- This behavior helps to prevent the injection of malicious scripts into your application.
- React automatically escapes the content of the scriptElement means that react automatically escapes the special characters in the scriptElement 
- The phrase the "react automatically escape the special characters" means that react takes care of converting potentially dangerous characters into HTML entity equivalents before rendering then to the DOM  

----------------------------
CROSS SITE SCRIPTING ATTACKS
----------------------------
- Cross-Site Scripting (XSS) is a type of security vulnerability that occurs when an attacker injects malicious scripts into web applications
- These scripts are then executed in the context of the victim's browser, allowing the attacker to steal sensitive information, manipulate user sessions, or deface websites.

--------------------
TYPES OF XSS ATTACKS
--------------------

- Stored XSS
  - The attacker puts a harmful script on the website (like in a comment or a post).
  - Anyone who views that specific part of the website gets affected.
  - example: imagine someone sneaking a note with a prank into a library book. The next person who reads that book sees the note and falls for the prank.

- Reflected XSS
  - The attacker tricks someone into clicking a special link with a harmful script.
  - The person who clicks the link is immediately affected, but the script is not saved on the website.
  - example: Think of someone giving you a link, and when you open it, a silly message pops up just for you. It's like a one-time trick.

- DOM-based XSS: 
  - The attacker messes with how a website's page looks or behaves using a harmful script. 
  - The person visiting the manipulated webpage becomes a victim, and their browser runs the harmful script.
  - Imagine someone changing a signpost so that you take a wrong turn. Similarly, an attacker changes something on a webpage, leading you to unintended consequences.

--------------------------------
MEASURES TO PREVENT  XSS ATTACKS
--------------------------------
- Keep Browsers Updated
  - Newer browser versions often have security improvements.
- Use a Reliable Security Software (anti-virus of anti-malware)
  - security software can help detect and block malicious scripts.
- Be Wary of Suspicious Link
  - Malicious scripts often come through deceptive links
  - hover over the links to see the actual web addresses before clicking 
- Enable Browser Security Features
  - Browsers have security settings that can help protect you.
  - enable pop up blockers and security warning
- Use Browser Extensions
  - Extensions can add an extra layer of security.
  - Consider using browser extensions that focus on security, like ad blockers or script blockers.
- Stay Informed About Websites
  - Be cautious with less-known websites, and check if they use "https://" in the web address for a secure connection.
- Log Out After Using Websites
  - Logging out reduces the risk of session-related attacks
  - After using a website with your account, log out to end your session.